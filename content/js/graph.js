/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 180.0, "minX": 0.0, "maxY": 20241.0, "series": [{"data": [[0.0, 180.0], [0.1, 180.0], [0.2, 180.0], [0.3, 180.0], [0.4, 180.0], [0.5, 180.0], [0.6, 180.0], [0.7, 180.0], [0.8, 180.0], [0.9, 180.0], [1.0, 203.0], [1.1, 203.0], [1.2, 203.0], [1.3, 203.0], [1.4, 203.0], [1.5, 203.0], [1.6, 203.0], [1.7, 203.0], [1.8, 203.0], [1.9, 203.0], [2.0, 205.0], [2.1, 205.0], [2.2, 205.0], [2.3, 205.0], [2.4, 205.0], [2.5, 205.0], [2.6, 205.0], [2.7, 205.0], [2.8, 205.0], [2.9, 205.0], [3.0, 217.0], [3.1, 217.0], [3.2, 217.0], [3.3, 217.0], [3.4, 217.0], [3.5, 217.0], [3.6, 217.0], [3.7, 217.0], [3.8, 217.0], [3.9, 217.0], [4.0, 384.0], [4.1, 384.0], [4.2, 384.0], [4.3, 384.0], [4.4, 384.0], [4.5, 384.0], [4.6, 384.0], [4.7, 384.0], [4.8, 384.0], [4.9, 384.0], [5.0, 481.0], [5.1, 481.0], [5.2, 481.0], [5.3, 481.0], [5.4, 481.0], [5.5, 481.0], [5.6, 481.0], [5.7, 481.0], [5.8, 481.0], [5.9, 481.0], [6.0, 1422.0], [6.1, 1422.0], [6.2, 1422.0], [6.3, 1422.0], [6.4, 1422.0], [6.5, 1422.0], [6.6, 1422.0], [6.7, 1422.0], [6.8, 1422.0], [6.9, 1422.0], [7.0, 1450.0], [7.1, 1450.0], [7.2, 1450.0], [7.3, 1450.0], [7.4, 1450.0], [7.5, 1450.0], [7.6, 1450.0], [7.7, 1450.0], [7.8, 1450.0], [7.9, 1450.0], [8.0, 1466.0], [8.1, 1466.0], [8.2, 1466.0], [8.3, 1466.0], [8.4, 1466.0], [8.5, 1466.0], [8.6, 1466.0], [8.7, 1466.0], [8.8, 1466.0], [8.9, 1466.0], [9.0, 1476.0], [9.1, 1476.0], [9.2, 1476.0], [9.3, 1476.0], [9.4, 1476.0], [9.5, 1476.0], [9.6, 1476.0], [9.7, 1476.0], [9.8, 1476.0], [9.9, 1476.0], [10.0, 1478.0], [10.1, 1478.0], [10.2, 1478.0], [10.3, 1478.0], [10.4, 1478.0], [10.5, 1478.0], [10.6, 1478.0], [10.7, 1478.0], [10.8, 1478.0], [10.9, 1478.0], [11.0, 1482.0], [11.1, 1482.0], [11.2, 1482.0], [11.3, 1482.0], [11.4, 1482.0], [11.5, 1482.0], [11.6, 1482.0], [11.7, 1482.0], [11.8, 1482.0], [11.9, 1482.0], [12.0, 1491.0], [12.1, 1491.0], [12.2, 1491.0], [12.3, 1491.0], [12.4, 1491.0], [12.5, 1491.0], [12.6, 1491.0], [12.7, 1491.0], [12.8, 1491.0], [12.9, 1491.0], [13.0, 1493.0], [13.1, 1493.0], [13.2, 1493.0], [13.3, 1493.0], [13.4, 1493.0], [13.5, 1493.0], [13.6, 1493.0], [13.7, 1493.0], [13.8, 1493.0], [13.9, 1493.0], [14.0, 1495.0], [14.1, 1495.0], [14.2, 1495.0], [14.3, 1495.0], [14.4, 1495.0], [14.5, 1495.0], [14.6, 1495.0], [14.7, 1495.0], [14.8, 1495.0], [14.9, 1495.0], [15.0, 1496.0], [15.1, 1496.0], [15.2, 1496.0], [15.3, 1496.0], [15.4, 1496.0], [15.5, 1496.0], [15.6, 1496.0], [15.7, 1496.0], [15.8, 1496.0], [15.9, 1496.0], [16.0, 1510.0], [16.1, 1510.0], [16.2, 1510.0], [16.3, 1510.0], [16.4, 1510.0], [16.5, 1510.0], [16.6, 1510.0], [16.7, 1510.0], [16.8, 1510.0], [16.9, 1510.0], [17.0, 1521.0], [17.1, 1521.0], [17.2, 1521.0], [17.3, 1521.0], [17.4, 1521.0], [17.5, 1521.0], [17.6, 1521.0], [17.7, 1521.0], [17.8, 1521.0], [17.9, 1521.0], [18.0, 1535.0], [18.1, 1535.0], [18.2, 1535.0], [18.3, 1535.0], [18.4, 1535.0], [18.5, 1535.0], [18.6, 1535.0], [18.7, 1535.0], [18.8, 1535.0], [18.9, 1535.0], [19.0, 1536.0], [19.1, 1536.0], [19.2, 1536.0], [19.3, 1536.0], [19.4, 1536.0], [19.5, 1536.0], [19.6, 1536.0], [19.7, 1536.0], [19.8, 1536.0], [19.9, 1536.0], [20.0, 1540.0], [20.1, 1540.0], [20.2, 1540.0], [20.3, 1540.0], [20.4, 1540.0], [20.5, 1540.0], [20.6, 1540.0], [20.7, 1540.0], [20.8, 1540.0], [20.9, 1540.0], [21.0, 1541.0], [21.1, 1541.0], [21.2, 1541.0], [21.3, 1541.0], [21.4, 1541.0], [21.5, 1541.0], [21.6, 1541.0], [21.7, 1541.0], [21.8, 1541.0], [21.9, 1541.0], [22.0, 1542.0], [22.1, 1542.0], [22.2, 1542.0], [22.3, 1542.0], [22.4, 1542.0], [22.5, 1542.0], [22.6, 1542.0], [22.7, 1542.0], [22.8, 1542.0], [22.9, 1542.0], [23.0, 1546.0], [23.1, 1546.0], [23.2, 1546.0], [23.3, 1546.0], [23.4, 1546.0], [23.5, 1546.0], [23.6, 1546.0], [23.7, 1546.0], [23.8, 1546.0], [23.9, 1546.0], [24.0, 1547.0], [24.1, 1547.0], [24.2, 1547.0], [24.3, 1547.0], [24.4, 1547.0], [24.5, 1547.0], [24.6, 1547.0], [24.7, 1547.0], [24.8, 1547.0], [24.9, 1547.0], [25.0, 1549.0], [25.1, 1549.0], [25.2, 1549.0], [25.3, 1549.0], [25.4, 1549.0], [25.5, 1549.0], [25.6, 1549.0], [25.7, 1549.0], [25.8, 1549.0], [25.9, 1549.0], [26.0, 1565.0], [26.1, 1565.0], [26.2, 1565.0], [26.3, 1565.0], [26.4, 1565.0], [26.5, 1565.0], [26.6, 1565.0], [26.7, 1565.0], [26.8, 1565.0], [26.9, 1565.0], [27.0, 1568.0], [27.1, 1568.0], [27.2, 1568.0], [27.3, 1568.0], [27.4, 1568.0], [27.5, 1568.0], [27.6, 1568.0], [27.7, 1568.0], [27.8, 1568.0], [27.9, 1568.0], [28.0, 1581.0], [28.1, 1581.0], [28.2, 1581.0], [28.3, 1581.0], [28.4, 1581.0], [28.5, 1581.0], [28.6, 1581.0], [28.7, 1581.0], [28.8, 1581.0], [28.9, 1581.0], [29.0, 1582.0], [29.1, 1582.0], [29.2, 1582.0], [29.3, 1582.0], [29.4, 1582.0], [29.5, 1582.0], [29.6, 1582.0], [29.7, 1582.0], [29.8, 1582.0], [29.9, 1582.0], [30.0, 1589.0], [30.1, 1589.0], [30.2, 1589.0], [30.3, 1589.0], [30.4, 1589.0], [30.5, 1589.0], [30.6, 1589.0], [30.7, 1589.0], [30.8, 1589.0], [30.9, 1589.0], [31.0, 1599.0], [31.1, 1599.0], [31.2, 1599.0], [31.3, 1599.0], [31.4, 1599.0], [31.5, 1599.0], [31.6, 1599.0], [31.7, 1599.0], [31.8, 1599.0], [31.9, 1599.0], [32.0, 1602.0], [32.1, 1602.0], [32.2, 1602.0], [32.3, 1602.0], [32.4, 1602.0], [32.5, 1602.0], [32.6, 1602.0], [32.7, 1602.0], [32.8, 1602.0], [32.9, 1602.0], [33.0, 1605.0], [33.1, 1605.0], [33.2, 1605.0], [33.3, 1605.0], [33.4, 1605.0], [33.5, 1605.0], [33.6, 1605.0], [33.7, 1605.0], [33.8, 1605.0], [33.9, 1605.0], [34.0, 1607.0], [34.1, 1607.0], [34.2, 1607.0], [34.3, 1607.0], [34.4, 1607.0], [34.5, 1607.0], [34.6, 1607.0], [34.7, 1607.0], [34.8, 1607.0], [34.9, 1607.0], [35.0, 1624.0], [35.1, 1624.0], [35.2, 1624.0], [35.3, 1624.0], [35.4, 1624.0], [35.5, 1624.0], [35.6, 1624.0], [35.7, 1624.0], [35.8, 1624.0], [35.9, 1624.0], [36.0, 1631.0], [36.1, 1631.0], [36.2, 1631.0], [36.3, 1631.0], [36.4, 1631.0], [36.5, 1631.0], [36.6, 1631.0], [36.7, 1631.0], [36.8, 1631.0], [36.9, 1631.0], [37.0, 1635.0], [37.1, 1635.0], [37.2, 1635.0], [37.3, 1635.0], [37.4, 1635.0], [37.5, 1635.0], [37.6, 1635.0], [37.7, 1635.0], [37.8, 1635.0], [37.9, 1635.0], [38.0, 1640.0], [38.1, 1640.0], [38.2, 1640.0], [38.3, 1640.0], [38.4, 1640.0], [38.5, 1640.0], [38.6, 1640.0], [38.7, 1640.0], [38.8, 1640.0], [38.9, 1640.0], [39.0, 1642.0], [39.1, 1642.0], [39.2, 1642.0], [39.3, 1642.0], [39.4, 1642.0], [39.5, 1642.0], [39.6, 1642.0], [39.7, 1642.0], [39.8, 1642.0], [39.9, 1642.0], [40.0, 1644.0], [40.1, 1644.0], [40.2, 1644.0], [40.3, 1644.0], [40.4, 1644.0], [40.5, 1644.0], [40.6, 1644.0], [40.7, 1644.0], [40.8, 1644.0], [40.9, 1644.0], [41.0, 1650.0], [41.1, 1650.0], [41.2, 1650.0], [41.3, 1650.0], [41.4, 1650.0], [41.5, 1650.0], [41.6, 1650.0], [41.7, 1650.0], [41.8, 1650.0], [41.9, 1650.0], [42.0, 1650.0], [42.1, 1650.0], [42.2, 1650.0], [42.3, 1650.0], [42.4, 1650.0], [42.5, 1650.0], [42.6, 1650.0], [42.7, 1650.0], [42.8, 1650.0], [42.9, 1650.0], [43.0, 1654.0], [43.1, 1654.0], [43.2, 1654.0], [43.3, 1654.0], [43.4, 1654.0], [43.5, 1654.0], [43.6, 1654.0], [43.7, 1654.0], [43.8, 1654.0], [43.9, 1654.0], [44.0, 1657.0], [44.1, 1657.0], [44.2, 1657.0], [44.3, 1657.0], [44.4, 1657.0], [44.5, 1657.0], [44.6, 1657.0], [44.7, 1657.0], [44.8, 1657.0], [44.9, 1657.0], [45.0, 1659.0], [45.1, 1659.0], [45.2, 1659.0], [45.3, 1659.0], [45.4, 1659.0], [45.5, 1659.0], [45.6, 1659.0], [45.7, 1659.0], [45.8, 1659.0], [45.9, 1659.0], [46.0, 1678.0], [46.1, 1678.0], [46.2, 1678.0], [46.3, 1678.0], [46.4, 1678.0], [46.5, 1678.0], [46.6, 1678.0], [46.7, 1678.0], [46.8, 1678.0], [46.9, 1678.0], [47.0, 1687.0], [47.1, 1687.0], [47.2, 1687.0], [47.3, 1687.0], [47.4, 1687.0], [47.5, 1687.0], [47.6, 1687.0], [47.7, 1687.0], [47.8, 1687.0], [47.9, 1687.0], [48.0, 1687.0], [48.1, 1687.0], [48.2, 1687.0], [48.3, 1687.0], [48.4, 1687.0], [48.5, 1687.0], [48.6, 1687.0], [48.7, 1687.0], [48.8, 1687.0], [48.9, 1687.0], [49.0, 1688.0], [49.1, 1688.0], [49.2, 1688.0], [49.3, 1688.0], [49.4, 1688.0], [49.5, 1688.0], [49.6, 1688.0], [49.7, 1688.0], [49.8, 1688.0], [49.9, 1688.0], [50.0, 1700.0], [50.1, 1700.0], [50.2, 1700.0], [50.3, 1700.0], [50.4, 1700.0], [50.5, 1700.0], [50.6, 1700.0], [50.7, 1700.0], [50.8, 1700.0], [50.9, 1700.0], [51.0, 1720.0], [51.1, 1720.0], [51.2, 1720.0], [51.3, 1720.0], [51.4, 1720.0], [51.5, 1720.0], [51.6, 1720.0], [51.7, 1720.0], [51.8, 1720.0], [51.9, 1720.0], [52.0, 1721.0], [52.1, 1721.0], [52.2, 1721.0], [52.3, 1721.0], [52.4, 1721.0], [52.5, 1721.0], [52.6, 1721.0], [52.7, 1721.0], [52.8, 1721.0], [52.9, 1721.0], [53.0, 1740.0], [53.1, 1740.0], [53.2, 1740.0], [53.3, 1740.0], [53.4, 1740.0], [53.5, 1740.0], [53.6, 1740.0], [53.7, 1740.0], [53.8, 1740.0], [53.9, 1740.0], [54.0, 1743.0], [54.1, 1743.0], [54.2, 1743.0], [54.3, 1743.0], [54.4, 1743.0], [54.5, 1743.0], [54.6, 1743.0], [54.7, 1743.0], [54.8, 1743.0], [54.9, 1743.0], [55.0, 1760.0], [55.1, 1760.0], [55.2, 1760.0], [55.3, 1760.0], [55.4, 1760.0], [55.5, 1760.0], [55.6, 1760.0], [55.7, 1760.0], [55.8, 1760.0], [55.9, 1760.0], [56.0, 1762.0], [56.1, 1762.0], [56.2, 1762.0], [56.3, 1762.0], [56.4, 1762.0], [56.5, 1762.0], [56.6, 1762.0], [56.7, 1762.0], [56.8, 1762.0], [56.9, 1762.0], [57.0, 1769.0], [57.1, 1769.0], [57.2, 1769.0], [57.3, 1769.0], [57.4, 1769.0], [57.5, 1769.0], [57.6, 1769.0], [57.7, 1769.0], [57.8, 1769.0], [57.9, 1769.0], [58.0, 1771.0], [58.1, 1771.0], [58.2, 1771.0], [58.3, 1771.0], [58.4, 1771.0], [58.5, 1771.0], [58.6, 1771.0], [58.7, 1771.0], [58.8, 1771.0], [58.9, 1771.0], [59.0, 1776.0], [59.1, 1776.0], [59.2, 1776.0], [59.3, 1776.0], [59.4, 1776.0], [59.5, 1776.0], [59.6, 1776.0], [59.7, 1776.0], [59.8, 1776.0], [59.9, 1776.0], [60.0, 1777.0], [60.1, 1777.0], [60.2, 1777.0], [60.3, 1777.0], [60.4, 1777.0], [60.5, 1777.0], [60.6, 1777.0], [60.7, 1777.0], [60.8, 1777.0], [60.9, 1777.0], [61.0, 1791.0], [61.1, 1791.0], [61.2, 1791.0], [61.3, 1791.0], [61.4, 1791.0], [61.5, 1791.0], [61.6, 1791.0], [61.7, 1791.0], [61.8, 1791.0], [61.9, 1791.0], [62.0, 1803.0], [62.1, 1803.0], [62.2, 1803.0], [62.3, 1803.0], [62.4, 1803.0], [62.5, 1803.0], [62.6, 1803.0], [62.7, 1803.0], [62.8, 1803.0], [62.9, 1803.0], [63.0, 1844.0], [63.1, 1844.0], [63.2, 1844.0], [63.3, 1844.0], [63.4, 1844.0], [63.5, 1844.0], [63.6, 1844.0], [63.7, 1844.0], [63.8, 1844.0], [63.9, 1844.0], [64.0, 1854.0], [64.1, 1854.0], [64.2, 1854.0], [64.3, 1854.0], [64.4, 1854.0], [64.5, 1854.0], [64.6, 1854.0], [64.7, 1854.0], [64.8, 1854.0], [64.9, 1854.0], [65.0, 1866.0], [65.1, 1866.0], [65.2, 1866.0], [65.3, 1866.0], [65.4, 1866.0], [65.5, 1866.0], [65.6, 1866.0], [65.7, 1866.0], [65.8, 1866.0], [65.9, 1866.0], [66.0, 1868.0], [66.1, 1868.0], [66.2, 1868.0], [66.3, 1868.0], [66.4, 1868.0], [66.5, 1868.0], [66.6, 1868.0], [66.7, 1868.0], [66.8, 1868.0], [66.9, 1868.0], [67.0, 1877.0], [67.1, 1877.0], [67.2, 1877.0], [67.3, 1877.0], [67.4, 1877.0], [67.5, 1877.0], [67.6, 1877.0], [67.7, 1877.0], [67.8, 1877.0], [67.9, 1877.0], [68.0, 1912.0], [68.1, 1912.0], [68.2, 1912.0], [68.3, 1912.0], [68.4, 1912.0], [68.5, 1912.0], [68.6, 1912.0], [68.7, 1912.0], [68.8, 1912.0], [68.9, 1912.0], [69.0, 1915.0], [69.1, 1915.0], [69.2, 1915.0], [69.3, 1915.0], [69.4, 1915.0], [69.5, 1915.0], [69.6, 1915.0], [69.7, 1915.0], [69.8, 1915.0], [69.9, 1915.0], [70.0, 1935.0], [70.1, 1935.0], [70.2, 1935.0], [70.3, 1935.0], [70.4, 1935.0], [70.5, 1935.0], [70.6, 1935.0], [70.7, 1935.0], [70.8, 1935.0], [70.9, 1935.0], [71.0, 1938.0], [71.1, 1938.0], [71.2, 1938.0], [71.3, 1938.0], [71.4, 1938.0], [71.5, 1938.0], [71.6, 1938.0], [71.7, 1938.0], [71.8, 1938.0], [71.9, 1938.0], [72.0, 1955.0], [72.1, 1955.0], [72.2, 1955.0], [72.3, 1955.0], [72.4, 1955.0], [72.5, 1955.0], [72.6, 1955.0], [72.7, 1955.0], [72.8, 1955.0], [72.9, 1955.0], [73.0, 2028.0], [73.1, 2028.0], [73.2, 2028.0], [73.3, 2028.0], [73.4, 2028.0], [73.5, 2028.0], [73.6, 2028.0], [73.7, 2028.0], [73.8, 2028.0], [73.9, 2028.0], [74.0, 2030.0], [74.1, 2030.0], [74.2, 2030.0], [74.3, 2030.0], [74.4, 2030.0], [74.5, 2030.0], [74.6, 2030.0], [74.7, 2030.0], [74.8, 2030.0], [74.9, 2030.0], [75.0, 2110.0], [75.1, 2110.0], [75.2, 2110.0], [75.3, 2110.0], [75.4, 2110.0], [75.5, 2110.0], [75.6, 2110.0], [75.7, 2110.0], [75.8, 2110.0], [75.9, 2110.0], [76.0, 2120.0], [76.1, 2120.0], [76.2, 2120.0], [76.3, 2120.0], [76.4, 2120.0], [76.5, 2120.0], [76.6, 2120.0], [76.7, 2120.0], [76.8, 2120.0], [76.9, 2120.0], [77.0, 2135.0], [77.1, 2135.0], [77.2, 2135.0], [77.3, 2135.0], [77.4, 2135.0], [77.5, 2135.0], [77.6, 2135.0], [77.7, 2135.0], [77.8, 2135.0], [77.9, 2135.0], [78.0, 2168.0], [78.1, 2168.0], [78.2, 2168.0], [78.3, 2168.0], [78.4, 2168.0], [78.5, 2168.0], [78.6, 2168.0], [78.7, 2168.0], [78.8, 2168.0], [78.9, 2168.0], [79.0, 2172.0], [79.1, 2172.0], [79.2, 2172.0], [79.3, 2172.0], [79.4, 2172.0], [79.5, 2172.0], [79.6, 2172.0], [79.7, 2172.0], [79.8, 2172.0], [79.9, 2172.0], [80.0, 2184.0], [80.1, 2184.0], [80.2, 2184.0], [80.3, 2184.0], [80.4, 2184.0], [80.5, 2184.0], [80.6, 2184.0], [80.7, 2184.0], [80.8, 2184.0], [80.9, 2184.0], [81.0, 2211.0], [81.1, 2211.0], [81.2, 2211.0], [81.3, 2211.0], [81.4, 2211.0], [81.5, 2211.0], [81.6, 2211.0], [81.7, 2211.0], [81.8, 2211.0], [81.9, 2211.0], [82.0, 2257.0], [82.1, 2257.0], [82.2, 2257.0], [82.3, 2257.0], [82.4, 2257.0], [82.5, 2257.0], [82.6, 2257.0], [82.7, 2257.0], [82.8, 2257.0], [82.9, 2257.0], [83.0, 2266.0], [83.1, 2266.0], [83.2, 2266.0], [83.3, 2266.0], [83.4, 2266.0], [83.5, 2266.0], [83.6, 2266.0], [83.7, 2266.0], [83.8, 2266.0], [83.9, 2266.0], [84.0, 2383.0], [84.1, 2383.0], [84.2, 2383.0], [84.3, 2383.0], [84.4, 2383.0], [84.5, 2383.0], [84.6, 2383.0], [84.7, 2383.0], [84.8, 2383.0], [84.9, 2383.0], [85.0, 2411.0], [85.1, 2411.0], [85.2, 2411.0], [85.3, 2411.0], [85.4, 2411.0], [85.5, 2411.0], [85.6, 2411.0], [85.7, 2411.0], [85.8, 2411.0], [85.9, 2411.0], [86.0, 2465.0], [86.1, 2465.0], [86.2, 2465.0], [86.3, 2465.0], [86.4, 2465.0], [86.5, 2465.0], [86.6, 2465.0], [86.7, 2465.0], [86.8, 2465.0], [86.9, 2465.0], [87.0, 2542.0], [87.1, 2542.0], [87.2, 2542.0], [87.3, 2542.0], [87.4, 2542.0], [87.5, 2542.0], [87.6, 2542.0], [87.7, 2542.0], [87.8, 2542.0], [87.9, 2542.0], [88.0, 2584.0], [88.1, 2584.0], [88.2, 2584.0], [88.3, 2584.0], [88.4, 2584.0], [88.5, 2584.0], [88.6, 2584.0], [88.7, 2584.0], [88.8, 2584.0], [88.9, 2584.0], [89.0, 2674.0], [89.1, 2674.0], [89.2, 2674.0], [89.3, 2674.0], [89.4, 2674.0], [89.5, 2674.0], [89.6, 2674.0], [89.7, 2674.0], [89.8, 2674.0], [89.9, 2674.0], [90.0, 2742.0], [90.1, 2742.0], [90.2, 2742.0], [90.3, 2742.0], [90.4, 2742.0], [90.5, 2742.0], [90.6, 2742.0], [90.7, 2742.0], [90.8, 2742.0], [90.9, 2742.0], [91.0, 2825.0], [91.1, 2825.0], [91.2, 2825.0], [91.3, 2825.0], [91.4, 2825.0], [91.5, 2825.0], [91.6, 2825.0], [91.7, 2825.0], [91.8, 2825.0], [91.9, 2825.0], [92.0, 2888.0], [92.1, 2888.0], [92.2, 2888.0], [92.3, 2888.0], [92.4, 2888.0], [92.5, 2888.0], [92.6, 2888.0], [92.7, 2888.0], [92.8, 2888.0], [92.9, 2888.0], [93.0, 2949.0], [93.1, 2949.0], [93.2, 2949.0], [93.3, 2949.0], [93.4, 2949.0], [93.5, 2949.0], [93.6, 2949.0], [93.7, 2949.0], [93.8, 2949.0], [93.9, 2949.0], [94.0, 3269.0], [94.1, 3269.0], [94.2, 3269.0], [94.3, 3269.0], [94.4, 3269.0], [94.5, 3269.0], [94.6, 3269.0], [94.7, 3269.0], [94.8, 3269.0], [94.9, 3269.0], [95.0, 3302.0], [95.1, 3302.0], [95.2, 3302.0], [95.3, 3302.0], [95.4, 3302.0], [95.5, 3302.0], [95.6, 3302.0], [95.7, 3302.0], [95.8, 3302.0], [95.9, 3302.0], [96.0, 20018.0], [96.1, 20018.0], [96.2, 20018.0], [96.3, 20018.0], [96.4, 20018.0], [96.5, 20018.0], [96.6, 20018.0], [96.7, 20018.0], [96.8, 20018.0], [96.9, 20018.0], [97.0, 20048.0], [97.1, 20048.0], [97.2, 20048.0], [97.3, 20048.0], [97.4, 20048.0], [97.5, 20048.0], [97.6, 20048.0], [97.7, 20048.0], [97.8, 20048.0], [97.9, 20048.0], [98.0, 20048.0], [98.1, 20048.0], [98.2, 20048.0], [98.3, 20048.0], [98.4, 20048.0], [98.5, 20048.0], [98.6, 20048.0], [98.7, 20048.0], [98.8, 20048.0], [98.9, 20048.0], [99.0, 20055.0], [99.1, 20055.0], [99.2, 20055.0], [99.3, 20055.0], [99.4, 20055.0], [99.5, 20055.0], [99.6, 20055.0], [99.7, 20055.0], [99.8, 20055.0], [99.9, 20055.0]], "isOverall": false, "label": "Open Proposal", "isController": false}, {"data": [[0.0, 5943.0], [0.1, 5943.0], [0.2, 5943.0], [0.3, 5943.0], [0.4, 5943.0], [0.5, 5943.0], [0.6, 5943.0], [0.7, 5943.0], [0.8, 5943.0], [0.9, 5943.0], [1.0, 6015.0], [1.1, 6015.0], [1.2, 6015.0], [1.3, 6015.0], [1.4, 6015.0], [1.5, 6015.0], [1.6, 6015.0], [1.7, 6015.0], [1.8, 6015.0], [1.9, 6015.0], [2.0, 6021.0], [2.1, 6021.0], [2.2, 6021.0], [2.3, 6021.0], [2.4, 6021.0], [2.5, 6021.0], [2.6, 6021.0], [2.7, 6021.0], [2.8, 6021.0], [2.9, 6021.0], [3.0, 6133.0], [3.1, 6133.0], [3.2, 6133.0], [3.3, 6133.0], [3.4, 6133.0], [3.5, 6133.0], [3.6, 6133.0], [3.7, 6133.0], [3.8, 6133.0], [3.9, 6133.0], [4.0, 6171.0], [4.1, 6171.0], [4.2, 6171.0], [4.3, 6171.0], [4.4, 6171.0], [4.5, 6171.0], [4.6, 6171.0], [4.7, 6171.0], [4.8, 6171.0], [4.9, 6171.0], [5.0, 6182.0], [5.1, 6182.0], [5.2, 6182.0], [5.3, 6182.0], [5.4, 6182.0], [5.5, 6182.0], [5.6, 6182.0], [5.7, 6182.0], [5.8, 6182.0], [5.9, 6182.0], [6.0, 6190.0], [6.1, 6190.0], [6.2, 6190.0], [6.3, 6190.0], [6.4, 6190.0], [6.5, 6190.0], [6.6, 6190.0], [6.7, 6190.0], [6.8, 6190.0], [6.9, 6190.0], [7.0, 6298.0], [7.1, 6298.0], [7.2, 6298.0], [7.3, 6298.0], [7.4, 6298.0], [7.5, 6298.0], [7.6, 6298.0], [7.7, 6298.0], [7.8, 6298.0], [7.9, 6298.0], [8.0, 6304.0], [8.1, 6304.0], [8.2, 6304.0], [8.3, 6304.0], [8.4, 6304.0], [8.5, 6304.0], [8.6, 6304.0], [8.7, 6304.0], [8.8, 6304.0], [8.9, 6304.0], [9.0, 6355.0], [9.1, 6355.0], [9.2, 6355.0], [9.3, 6355.0], [9.4, 6355.0], [9.5, 6355.0], [9.6, 6355.0], [9.7, 6355.0], [9.8, 6355.0], [9.9, 6355.0], [10.0, 6362.0], [10.1, 6362.0], [10.2, 6362.0], [10.3, 6362.0], [10.4, 6362.0], [10.5, 6362.0], [10.6, 6362.0], [10.7, 6362.0], [10.8, 6362.0], [10.9, 6362.0], [11.0, 6363.0], [11.1, 6363.0], [11.2, 6363.0], [11.3, 6363.0], [11.4, 6363.0], [11.5, 6363.0], [11.6, 6363.0], [11.7, 6363.0], [11.8, 6363.0], [11.9, 6363.0], [12.0, 6385.0], [12.1, 6385.0], [12.2, 6385.0], [12.3, 6385.0], [12.4, 6385.0], [12.5, 6385.0], [12.6, 6385.0], [12.7, 6385.0], [12.8, 6385.0], [12.9, 6385.0], [13.0, 6390.0], [13.1, 6390.0], [13.2, 6390.0], [13.3, 6390.0], [13.4, 6390.0], [13.5, 6390.0], [13.6, 6390.0], [13.7, 6390.0], [13.8, 6390.0], [13.9, 6390.0], [14.0, 6465.0], [14.1, 6465.0], [14.2, 6465.0], [14.3, 6465.0], [14.4, 6465.0], [14.5, 6465.0], [14.6, 6465.0], [14.7, 6465.0], [14.8, 6465.0], [14.9, 6465.0], [15.0, 6477.0], [15.1, 6477.0], [15.2, 6477.0], [15.3, 6477.0], [15.4, 6477.0], [15.5, 6477.0], [15.6, 6477.0], [15.7, 6477.0], [15.8, 6477.0], [15.9, 6477.0], [16.0, 6518.0], [16.1, 6518.0], [16.2, 6518.0], [16.3, 6518.0], [16.4, 6518.0], [16.5, 6518.0], [16.6, 6518.0], [16.7, 6518.0], [16.8, 6518.0], [16.9, 6518.0], [17.0, 6527.0], [17.1, 6527.0], [17.2, 6527.0], [17.3, 6527.0], [17.4, 6527.0], [17.5, 6527.0], [17.6, 6527.0], [17.7, 6527.0], [17.8, 6527.0], [17.9, 6527.0], [18.0, 6546.0], [18.1, 6546.0], [18.2, 6546.0], [18.3, 6546.0], [18.4, 6546.0], [18.5, 6546.0], [18.6, 6546.0], [18.7, 6546.0], [18.8, 6546.0], [18.9, 6546.0], [19.0, 6560.0], [19.1, 6560.0], [19.2, 6560.0], [19.3, 6560.0], [19.4, 6560.0], [19.5, 6560.0], [19.6, 6560.0], [19.7, 6560.0], [19.8, 6560.0], [19.9, 6560.0], [20.0, 6577.0], [20.1, 6577.0], [20.2, 6577.0], [20.3, 6577.0], [20.4, 6577.0], [20.5, 6577.0], [20.6, 6577.0], [20.7, 6577.0], [20.8, 6577.0], [20.9, 6577.0], [21.0, 6584.0], [21.1, 6584.0], [21.2, 6584.0], [21.3, 6584.0], [21.4, 6584.0], [21.5, 6584.0], [21.6, 6584.0], [21.7, 6584.0], [21.8, 6584.0], [21.9, 6584.0], [22.0, 6603.0], [22.1, 6603.0], [22.2, 6603.0], [22.3, 6603.0], [22.4, 6603.0], [22.5, 6603.0], [22.6, 6603.0], [22.7, 6603.0], [22.8, 6603.0], [22.9, 6603.0], [23.0, 6613.0], [23.1, 6613.0], [23.2, 6613.0], [23.3, 6613.0], [23.4, 6613.0], [23.5, 6613.0], [23.6, 6613.0], [23.7, 6613.0], [23.8, 6613.0], [23.9, 6613.0], [24.0, 6616.0], [24.1, 6616.0], [24.2, 6616.0], [24.3, 6616.0], [24.4, 6616.0], [24.5, 6616.0], [24.6, 6616.0], [24.7, 6616.0], [24.8, 6616.0], [24.9, 6616.0], [25.0, 6625.0], [25.1, 6625.0], [25.2, 6625.0], [25.3, 6625.0], [25.4, 6625.0], [25.5, 6625.0], [25.6, 6625.0], [25.7, 6625.0], [25.8, 6625.0], [25.9, 6625.0], [26.0, 6630.0], [26.1, 6630.0], [26.2, 6630.0], [26.3, 6630.0], [26.4, 6630.0], [26.5, 6630.0], [26.6, 6630.0], [26.7, 6630.0], [26.8, 6630.0], [26.9, 6630.0], [27.0, 6662.0], [27.1, 6662.0], [27.2, 6662.0], [27.3, 6662.0], [27.4, 6662.0], [27.5, 6662.0], [27.6, 6662.0], [27.7, 6662.0], [27.8, 6662.0], [27.9, 6662.0], [28.0, 6670.0], [28.1, 6670.0], [28.2, 6670.0], [28.3, 6670.0], [28.4, 6670.0], [28.5, 6670.0], [28.6, 6670.0], [28.7, 6670.0], [28.8, 6670.0], [28.9, 6670.0], [29.0, 6672.0], [29.1, 6672.0], [29.2, 6672.0], [29.3, 6672.0], [29.4, 6672.0], [29.5, 6672.0], [29.6, 6672.0], [29.7, 6672.0], [29.8, 6672.0], [29.9, 6672.0], [30.0, 6678.0], [30.1, 6678.0], [30.2, 6678.0], [30.3, 6678.0], [30.4, 6678.0], [30.5, 6678.0], [30.6, 6678.0], [30.7, 6678.0], [30.8, 6678.0], [30.9, 6678.0], [31.0, 6689.0], [31.1, 6689.0], [31.2, 6689.0], [31.3, 6689.0], [31.4, 6689.0], [31.5, 6689.0], [31.6, 6689.0], [31.7, 6689.0], [31.8, 6689.0], [31.9, 6689.0], [32.0, 6732.0], [32.1, 6732.0], [32.2, 6732.0], [32.3, 6732.0], [32.4, 6732.0], [32.5, 6732.0], [32.6, 6732.0], [32.7, 6732.0], [32.8, 6732.0], [32.9, 6732.0], [33.0, 6734.0], [33.1, 6734.0], [33.2, 6734.0], [33.3, 6734.0], [33.4, 6734.0], [33.5, 6734.0], [33.6, 6734.0], [33.7, 6734.0], [33.8, 6734.0], [33.9, 6734.0], [34.0, 6748.0], [34.1, 6748.0], [34.2, 6748.0], [34.3, 6748.0], [34.4, 6748.0], [34.5, 6748.0], [34.6, 6748.0], [34.7, 6748.0], [34.8, 6748.0], [34.9, 6748.0], [35.0, 6774.0], [35.1, 6774.0], [35.2, 6774.0], [35.3, 6774.0], [35.4, 6774.0], [35.5, 6774.0], [35.6, 6774.0], [35.7, 6774.0], [35.8, 6774.0], [35.9, 6774.0], [36.0, 6792.0], [36.1, 6792.0], [36.2, 6792.0], [36.3, 6792.0], [36.4, 6792.0], [36.5, 6792.0], [36.6, 6792.0], [36.7, 6792.0], [36.8, 6792.0], [36.9, 6792.0], [37.0, 6798.0], [37.1, 6798.0], [37.2, 6798.0], [37.3, 6798.0], [37.4, 6798.0], [37.5, 6798.0], [37.6, 6798.0], [37.7, 6798.0], [37.8, 6798.0], [37.9, 6798.0], [38.0, 6810.0], [38.1, 6810.0], [38.2, 6810.0], [38.3, 6810.0], [38.4, 6810.0], [38.5, 6810.0], [38.6, 6810.0], [38.7, 6810.0], [38.8, 6810.0], [38.9, 6810.0], [39.0, 6835.0], [39.1, 6835.0], [39.2, 6835.0], [39.3, 6835.0], [39.4, 6835.0], [39.5, 6835.0], [39.6, 6835.0], [39.7, 6835.0], [39.8, 6835.0], [39.9, 6835.0], [40.0, 6841.0], [40.1, 6841.0], [40.2, 6841.0], [40.3, 6841.0], [40.4, 6841.0], [40.5, 6841.0], [40.6, 6841.0], [40.7, 6841.0], [40.8, 6841.0], [40.9, 6841.0], [41.0, 6864.0], [41.1, 6864.0], [41.2, 6864.0], [41.3, 6864.0], [41.4, 6864.0], [41.5, 6864.0], [41.6, 6864.0], [41.7, 6864.0], [41.8, 6864.0], [41.9, 6864.0], [42.0, 6866.0], [42.1, 6866.0], [42.2, 6866.0], [42.3, 6866.0], [42.4, 6866.0], [42.5, 6866.0], [42.6, 6866.0], [42.7, 6866.0], [42.8, 6866.0], [42.9, 6866.0], [43.0, 6875.0], [43.1, 6875.0], [43.2, 6875.0], [43.3, 6875.0], [43.4, 6875.0], [43.5, 6875.0], [43.6, 6875.0], [43.7, 6875.0], [43.8, 6875.0], [43.9, 6875.0], [44.0, 6878.0], [44.1, 6878.0], [44.2, 6878.0], [44.3, 6878.0], [44.4, 6878.0], [44.5, 6878.0], [44.6, 6878.0], [44.7, 6878.0], [44.8, 6878.0], [44.9, 6878.0], [45.0, 6890.0], [45.1, 6890.0], [45.2, 6890.0], [45.3, 6890.0], [45.4, 6890.0], [45.5, 6890.0], [45.6, 6890.0], [45.7, 6890.0], [45.8, 6890.0], [45.9, 6890.0], [46.0, 6906.0], [46.1, 6906.0], [46.2, 6906.0], [46.3, 6906.0], [46.4, 6906.0], [46.5, 6906.0], [46.6, 6906.0], [46.7, 6906.0], [46.8, 6906.0], [46.9, 6906.0], [47.0, 6921.0], [47.1, 6921.0], [47.2, 6921.0], [47.3, 6921.0], [47.4, 6921.0], [47.5, 6921.0], [47.6, 6921.0], [47.7, 6921.0], [47.8, 6921.0], [47.9, 6921.0], [48.0, 6951.0], [48.1, 6951.0], [48.2, 6951.0], [48.3, 6951.0], [48.4, 6951.0], [48.5, 6951.0], [48.6, 6951.0], [48.7, 6951.0], [48.8, 6951.0], [48.9, 6951.0], [49.0, 6954.0], [49.1, 6954.0], [49.2, 6954.0], [49.3, 6954.0], [49.4, 6954.0], [49.5, 6954.0], [49.6, 6954.0], [49.7, 6954.0], [49.8, 6954.0], [49.9, 6954.0], [50.0, 6962.0], [50.1, 6962.0], [50.2, 6962.0], [50.3, 6962.0], [50.4, 6962.0], [50.5, 6962.0], [50.6, 6962.0], [50.7, 6962.0], [50.8, 6962.0], [50.9, 6962.0], [51.0, 6964.0], [51.1, 6964.0], [51.2, 6964.0], [51.3, 6964.0], [51.4, 6964.0], [51.5, 6964.0], [51.6, 6964.0], [51.7, 6964.0], [51.8, 6964.0], [51.9, 6964.0], [52.0, 6975.0], [52.1, 6975.0], [52.2, 6975.0], [52.3, 6975.0], [52.4, 6975.0], [52.5, 6975.0], [52.6, 6975.0], [52.7, 6975.0], [52.8, 6975.0], [52.9, 6975.0], [53.0, 6976.0], [53.1, 6976.0], [53.2, 6976.0], [53.3, 6976.0], [53.4, 6976.0], [53.5, 6976.0], [53.6, 6976.0], [53.7, 6976.0], [53.8, 6976.0], [53.9, 6976.0], [54.0, 6976.0], [54.1, 6976.0], [54.2, 6976.0], [54.3, 6976.0], [54.4, 6976.0], [54.5, 6976.0], [54.6, 6976.0], [54.7, 6976.0], [54.8, 6976.0], [54.9, 6976.0], [55.0, 6996.0], [55.1, 6996.0], [55.2, 6996.0], [55.3, 6996.0], [55.4, 6996.0], [55.5, 6996.0], [55.6, 6996.0], [55.7, 6996.0], [55.8, 6996.0], [55.9, 6996.0], [56.0, 6998.0], [56.1, 6998.0], [56.2, 6998.0], [56.3, 6998.0], [56.4, 6998.0], [56.5, 6998.0], [56.6, 6998.0], [56.7, 6998.0], [56.8, 6998.0], [56.9, 6998.0], [57.0, 7004.0], [57.1, 7004.0], [57.2, 7004.0], [57.3, 7004.0], [57.4, 7004.0], [57.5, 7004.0], [57.6, 7004.0], [57.7, 7004.0], [57.8, 7004.0], [57.9, 7004.0], [58.0, 7020.0], [58.1, 7020.0], [58.2, 7020.0], [58.3, 7020.0], [58.4, 7020.0], [58.5, 7020.0], [58.6, 7020.0], [58.7, 7020.0], [58.8, 7020.0], [58.9, 7020.0], [59.0, 7053.0], [59.1, 7053.0], [59.2, 7053.0], [59.3, 7053.0], [59.4, 7053.0], [59.5, 7053.0], [59.6, 7053.0], [59.7, 7053.0], [59.8, 7053.0], [59.9, 7053.0], [60.0, 7057.0], [60.1, 7057.0], [60.2, 7057.0], [60.3, 7057.0], [60.4, 7057.0], [60.5, 7057.0], [60.6, 7057.0], [60.7, 7057.0], [60.8, 7057.0], [60.9, 7057.0], [61.0, 7064.0], [61.1, 7064.0], [61.2, 7064.0], [61.3, 7064.0], [61.4, 7064.0], [61.5, 7064.0], [61.6, 7064.0], [61.7, 7064.0], [61.8, 7064.0], [61.9, 7064.0], [62.0, 7067.0], [62.1, 7067.0], [62.2, 7067.0], [62.3, 7067.0], [62.4, 7067.0], [62.5, 7067.0], [62.6, 7067.0], [62.7, 7067.0], [62.8, 7067.0], [62.9, 7067.0], [63.0, 7072.0], [63.1, 7072.0], [63.2, 7072.0], [63.3, 7072.0], [63.4, 7072.0], [63.5, 7072.0], [63.6, 7072.0], [63.7, 7072.0], [63.8, 7072.0], [63.9, 7072.0], [64.0, 7088.0], [64.1, 7088.0], [64.2, 7088.0], [64.3, 7088.0], [64.4, 7088.0], [64.5, 7088.0], [64.6, 7088.0], [64.7, 7088.0], [64.8, 7088.0], [64.9, 7088.0], [65.0, 7097.0], [65.1, 7097.0], [65.2, 7097.0], [65.3, 7097.0], [65.4, 7097.0], [65.5, 7097.0], [65.6, 7097.0], [65.7, 7097.0], [65.8, 7097.0], [65.9, 7097.0], [66.0, 7117.0], [66.1, 7117.0], [66.2, 7117.0], [66.3, 7117.0], [66.4, 7117.0], [66.5, 7117.0], [66.6, 7117.0], [66.7, 7117.0], [66.8, 7117.0], [66.9, 7117.0], [67.0, 7120.0], [67.1, 7120.0], [67.2, 7120.0], [67.3, 7120.0], [67.4, 7120.0], [67.5, 7120.0], [67.6, 7120.0], [67.7, 7120.0], [67.8, 7120.0], [67.9, 7120.0], [68.0, 7143.0], [68.1, 7143.0], [68.2, 7143.0], [68.3, 7143.0], [68.4, 7143.0], [68.5, 7143.0], [68.6, 7143.0], [68.7, 7143.0], [68.8, 7143.0], [68.9, 7143.0], [69.0, 7152.0], [69.1, 7152.0], [69.2, 7152.0], [69.3, 7152.0], [69.4, 7152.0], [69.5, 7152.0], [69.6, 7152.0], [69.7, 7152.0], [69.8, 7152.0], [69.9, 7152.0], [70.0, 7157.0], [70.1, 7157.0], [70.2, 7157.0], [70.3, 7157.0], [70.4, 7157.0], [70.5, 7157.0], [70.6, 7157.0], [70.7, 7157.0], [70.8, 7157.0], [70.9, 7157.0], [71.0, 7172.0], [71.1, 7172.0], [71.2, 7172.0], [71.3, 7172.0], [71.4, 7172.0], [71.5, 7172.0], [71.6, 7172.0], [71.7, 7172.0], [71.8, 7172.0], [71.9, 7172.0], [72.0, 7181.0], [72.1, 7181.0], [72.2, 7181.0], [72.3, 7181.0], [72.4, 7181.0], [72.5, 7181.0], [72.6, 7181.0], [72.7, 7181.0], [72.8, 7181.0], [72.9, 7181.0], [73.0, 7202.0], [73.1, 7202.0], [73.2, 7202.0], [73.3, 7202.0], [73.4, 7202.0], [73.5, 7202.0], [73.6, 7202.0], [73.7, 7202.0], [73.8, 7202.0], [73.9, 7202.0], [74.0, 7207.0], [74.1, 7207.0], [74.2, 7207.0], [74.3, 7207.0], [74.4, 7207.0], [74.5, 7207.0], [74.6, 7207.0], [74.7, 7207.0], [74.8, 7207.0], [74.9, 7207.0], [75.0, 7248.0], [75.1, 7248.0], [75.2, 7248.0], [75.3, 7248.0], [75.4, 7248.0], [75.5, 7248.0], [75.6, 7248.0], [75.7, 7248.0], [75.8, 7248.0], [75.9, 7248.0], [76.0, 7360.0], [76.1, 7360.0], [76.2, 7360.0], [76.3, 7360.0], [76.4, 7360.0], [76.5, 7360.0], [76.6, 7360.0], [76.7, 7360.0], [76.8, 7360.0], [76.9, 7360.0], [77.0, 7388.0], [77.1, 7388.0], [77.2, 7388.0], [77.3, 7388.0], [77.4, 7388.0], [77.5, 7388.0], [77.6, 7388.0], [77.7, 7388.0], [77.8, 7388.0], [77.9, 7388.0], [78.0, 7392.0], [78.1, 7392.0], [78.2, 7392.0], [78.3, 7392.0], [78.4, 7392.0], [78.5, 7392.0], [78.6, 7392.0], [78.7, 7392.0], [78.8, 7392.0], [78.9, 7392.0], [79.0, 7423.0], [79.1, 7423.0], [79.2, 7423.0], [79.3, 7423.0], [79.4, 7423.0], [79.5, 7423.0], [79.6, 7423.0], [79.7, 7423.0], [79.8, 7423.0], [79.9, 7423.0], [80.0, 7469.0], [80.1, 7469.0], [80.2, 7469.0], [80.3, 7469.0], [80.4, 7469.0], [80.5, 7469.0], [80.6, 7469.0], [80.7, 7469.0], [80.8, 7469.0], [80.9, 7469.0], [81.0, 7476.0], [81.1, 7476.0], [81.2, 7476.0], [81.3, 7476.0], [81.4, 7476.0], [81.5, 7476.0], [81.6, 7476.0], [81.7, 7476.0], [81.8, 7476.0], [81.9, 7476.0], [82.0, 7525.0], [82.1, 7525.0], [82.2, 7525.0], [82.3, 7525.0], [82.4, 7525.0], [82.5, 7525.0], [82.6, 7525.0], [82.7, 7525.0], [82.8, 7525.0], [82.9, 7525.0], [83.0, 7541.0], [83.1, 7541.0], [83.2, 7541.0], [83.3, 7541.0], [83.4, 7541.0], [83.5, 7541.0], [83.6, 7541.0], [83.7, 7541.0], [83.8, 7541.0], [83.9, 7541.0], [84.0, 7631.0], [84.1, 7631.0], [84.2, 7631.0], [84.3, 7631.0], [84.4, 7631.0], [84.5, 7631.0], [84.6, 7631.0], [84.7, 7631.0], [84.8, 7631.0], [84.9, 7631.0], [85.0, 7687.0], [85.1, 7687.0], [85.2, 7687.0], [85.3, 7687.0], [85.4, 7687.0], [85.5, 7687.0], [85.6, 7687.0], [85.7, 7687.0], [85.8, 7687.0], [85.9, 7687.0], [86.0, 7791.0], [86.1, 7791.0], [86.2, 7791.0], [86.3, 7791.0], [86.4, 7791.0], [86.5, 7791.0], [86.6, 7791.0], [86.7, 7791.0], [86.8, 7791.0], [86.9, 7791.0], [87.0, 7807.0], [87.1, 7807.0], [87.2, 7807.0], [87.3, 7807.0], [87.4, 7807.0], [87.5, 7807.0], [87.6, 7807.0], [87.7, 7807.0], [87.8, 7807.0], [87.9, 7807.0], [88.0, 7860.0], [88.1, 7860.0], [88.2, 7860.0], [88.3, 7860.0], [88.4, 7860.0], [88.5, 7860.0], [88.6, 7860.0], [88.7, 7860.0], [88.8, 7860.0], [88.9, 7860.0], [89.0, 7954.0], [89.1, 7954.0], [89.2, 7954.0], [89.3, 7954.0], [89.4, 7954.0], [89.5, 7954.0], [89.6, 7954.0], [89.7, 7954.0], [89.8, 7954.0], [89.9, 7954.0], [90.0, 8028.0], [90.1, 8028.0], [90.2, 8028.0], [90.3, 8028.0], [90.4, 8028.0], [90.5, 8028.0], [90.6, 8028.0], [90.7, 8028.0], [90.8, 8028.0], [90.9, 8028.0], [91.0, 8040.0], [91.1, 8040.0], [91.2, 8040.0], [91.3, 8040.0], [91.4, 8040.0], [91.5, 8040.0], [91.6, 8040.0], [91.7, 8040.0], [91.8, 8040.0], [91.9, 8040.0], [92.0, 8481.0], [92.1, 8481.0], [92.2, 8481.0], [92.3, 8481.0], [92.4, 8481.0], [92.5, 8481.0], [92.6, 8481.0], [92.7, 8481.0], [92.8, 8481.0], [92.9, 8481.0], [93.0, 8597.0], [93.1, 8597.0], [93.2, 8597.0], [93.3, 8597.0], [93.4, 8597.0], [93.5, 8597.0], [93.6, 8597.0], [93.7, 8597.0], [93.8, 8597.0], [93.9, 8597.0], [94.0, 9077.0], [94.1, 9077.0], [94.2, 9077.0], [94.3, 9077.0], [94.4, 9077.0], [94.5, 9077.0], [94.6, 9077.0], [94.7, 9077.0], [94.8, 9077.0], [94.9, 9077.0], [95.0, 9221.0], [95.1, 9221.0], [95.2, 9221.0], [95.3, 9221.0], [95.4, 9221.0], [95.5, 9221.0], [95.6, 9221.0], [95.7, 9221.0], [95.8, 9221.0], [95.9, 9221.0], [96.0, 9474.0], [96.1, 9474.0], [96.2, 9474.0], [96.3, 9474.0], [96.4, 9474.0], [96.5, 9474.0], [96.6, 9474.0], [96.7, 9474.0], [96.8, 9474.0], [96.9, 9474.0], [97.0, 20214.0], [97.1, 20214.0], [97.2, 20214.0], [97.3, 20214.0], [97.4, 20214.0], [97.5, 20214.0], [97.6, 20214.0], [97.7, 20214.0], [97.8, 20214.0], [97.9, 20214.0], [98.0, 20218.0], [98.1, 20218.0], [98.2, 20218.0], [98.3, 20218.0], [98.4, 20218.0], [98.5, 20218.0], [98.6, 20218.0], [98.7, 20218.0], [98.8, 20218.0], [98.9, 20218.0], [99.0, 20241.0], [99.1, 20241.0], [99.2, 20241.0], [99.3, 20241.0], [99.4, 20241.0], [99.5, 20241.0], [99.6, 20241.0], [99.7, 20241.0], [99.8, 20241.0], [99.9, 20241.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 1273.0], [0.1, 1273.0], [0.2, 1273.0], [0.3, 1273.0], [0.4, 1273.0], [0.5, 1273.0], [0.6, 1273.0], [0.7, 1273.0], [0.8, 1273.0], [0.9, 1273.0], [1.0, 1276.0], [1.1, 1276.0], [1.2, 1276.0], [1.3, 1276.0], [1.4, 1276.0], [1.5, 1276.0], [1.6, 1276.0], [1.7, 1276.0], [1.8, 1276.0], [1.9, 1276.0], [2.0, 1301.0], [2.1, 1301.0], [2.2, 1301.0], [2.3, 1301.0], [2.4, 1301.0], [2.5, 1301.0], [2.6, 1301.0], [2.7, 1301.0], [2.8, 1301.0], [2.9, 1301.0], [3.0, 1305.0], [3.1, 1305.0], [3.2, 1305.0], [3.3, 1305.0], [3.4, 1305.0], [3.5, 1305.0], [3.6, 1305.0], [3.7, 1305.0], [3.8, 1305.0], [3.9, 1305.0], [4.0, 1309.0], [4.1, 1309.0], [4.2, 1309.0], [4.3, 1309.0], [4.4, 1309.0], [4.5, 1309.0], [4.6, 1309.0], [4.7, 1309.0], [4.8, 1309.0], [4.9, 1309.0], [5.0, 1314.0], [5.1, 1314.0], [5.2, 1314.0], [5.3, 1314.0], [5.4, 1314.0], [5.5, 1314.0], [5.6, 1314.0], [5.7, 1314.0], [5.8, 1314.0], [5.9, 1314.0], [6.0, 1316.0], [6.1, 1316.0], [6.2, 1316.0], [6.3, 1316.0], [6.4, 1316.0], [6.5, 1316.0], [6.6, 1316.0], [6.7, 1316.0], [6.8, 1316.0], [6.9, 1316.0], [7.0, 1338.0], [7.1, 1338.0], [7.2, 1338.0], [7.3, 1338.0], [7.4, 1338.0], [7.5, 1338.0], [7.6, 1338.0], [7.7, 1338.0], [7.8, 1338.0], [7.9, 1338.0], [8.0, 1340.0], [8.1, 1340.0], [8.2, 1340.0], [8.3, 1340.0], [8.4, 1340.0], [8.5, 1340.0], [8.6, 1340.0], [8.7, 1340.0], [8.8, 1340.0], [8.9, 1340.0], [9.0, 1342.0], [9.1, 1342.0], [9.2, 1342.0], [9.3, 1342.0], [9.4, 1342.0], [9.5, 1342.0], [9.6, 1342.0], [9.7, 1342.0], [9.8, 1342.0], [9.9, 1342.0], [10.0, 1348.0], [10.1, 1348.0], [10.2, 1348.0], [10.3, 1348.0], [10.4, 1348.0], [10.5, 1348.0], [10.6, 1348.0], [10.7, 1348.0], [10.8, 1348.0], [10.9, 1348.0], [11.0, 1349.0], [11.1, 1349.0], [11.2, 1349.0], [11.3, 1349.0], [11.4, 1349.0], [11.5, 1349.0], [11.6, 1349.0], [11.7, 1349.0], [11.8, 1349.0], [11.9, 1349.0], [12.0, 1359.0], [12.1, 1359.0], [12.2, 1359.0], [12.3, 1359.0], [12.4, 1359.0], [12.5, 1359.0], [12.6, 1359.0], [12.7, 1359.0], [12.8, 1359.0], [12.9, 1359.0], [13.0, 1375.0], [13.1, 1375.0], [13.2, 1375.0], [13.3, 1375.0], [13.4, 1375.0], [13.5, 1375.0], [13.6, 1375.0], [13.7, 1375.0], [13.8, 1375.0], [13.9, 1375.0], [14.0, 1400.0], [14.1, 1400.0], [14.2, 1400.0], [14.3, 1400.0], [14.4, 1400.0], [14.5, 1400.0], [14.6, 1400.0], [14.7, 1400.0], [14.8, 1400.0], [14.9, 1400.0], [15.0, 1409.0], [15.1, 1409.0], [15.2, 1409.0], [15.3, 1409.0], [15.4, 1409.0], [15.5, 1409.0], [15.6, 1409.0], [15.7, 1409.0], [15.8, 1409.0], [15.9, 1409.0], [16.0, 1413.0], [16.1, 1413.0], [16.2, 1413.0], [16.3, 1413.0], [16.4, 1413.0], [16.5, 1413.0], [16.6, 1413.0], [16.7, 1413.0], [16.8, 1413.0], [16.9, 1413.0], [17.0, 1419.0], [17.1, 1419.0], [17.2, 1419.0], [17.3, 1419.0], [17.4, 1419.0], [17.5, 1419.0], [17.6, 1419.0], [17.7, 1419.0], [17.8, 1419.0], [17.9, 1419.0], [18.0, 1426.0], [18.1, 1426.0], [18.2, 1426.0], [18.3, 1426.0], [18.4, 1426.0], [18.5, 1426.0], [18.6, 1426.0], [18.7, 1426.0], [18.8, 1426.0], [18.9, 1426.0], [19.0, 1428.0], [19.1, 1428.0], [19.2, 1428.0], [19.3, 1428.0], [19.4, 1428.0], [19.5, 1428.0], [19.6, 1428.0], [19.7, 1428.0], [19.8, 1428.0], [19.9, 1428.0], [20.0, 1429.0], [20.1, 1429.0], [20.2, 1429.0], [20.3, 1429.0], [20.4, 1429.0], [20.5, 1429.0], [20.6, 1429.0], [20.7, 1429.0], [20.8, 1429.0], [20.9, 1429.0], [21.0, 1435.0], [21.1, 1435.0], [21.2, 1435.0], [21.3, 1435.0], [21.4, 1435.0], [21.5, 1435.0], [21.6, 1435.0], [21.7, 1435.0], [21.8, 1435.0], [21.9, 1435.0], [22.0, 1445.0], [22.1, 1445.0], [22.2, 1445.0], [22.3, 1445.0], [22.4, 1445.0], [22.5, 1445.0], [22.6, 1445.0], [22.7, 1445.0], [22.8, 1445.0], [22.9, 1445.0], [23.0, 1447.0], [23.1, 1447.0], [23.2, 1447.0], [23.3, 1447.0], [23.4, 1447.0], [23.5, 1447.0], [23.6, 1447.0], [23.7, 1447.0], [23.8, 1447.0], [23.9, 1447.0], [24.0, 1450.0], [24.1, 1450.0], [24.2, 1450.0], [24.3, 1450.0], [24.4, 1450.0], [24.5, 1450.0], [24.6, 1450.0], [24.7, 1450.0], [24.8, 1450.0], [24.9, 1450.0], [25.0, 1454.0], [25.1, 1454.0], [25.2, 1454.0], [25.3, 1454.0], [25.4, 1454.0], [25.5, 1454.0], [25.6, 1454.0], [25.7, 1454.0], [25.8, 1454.0], [25.9, 1454.0], [26.0, 1455.0], [26.1, 1455.0], [26.2, 1455.0], [26.3, 1455.0], [26.4, 1455.0], [26.5, 1455.0], [26.6, 1455.0], [26.7, 1455.0], [26.8, 1455.0], [26.9, 1455.0], [27.0, 1461.0], [27.1, 1461.0], [27.2, 1461.0], [27.3, 1461.0], [27.4, 1461.0], [27.5, 1461.0], [27.6, 1461.0], [27.7, 1461.0], [27.8, 1461.0], [27.9, 1461.0], [28.0, 1463.0], [28.1, 1463.0], [28.2, 1463.0], [28.3, 1463.0], [28.4, 1463.0], [28.5, 1463.0], [28.6, 1463.0], [28.7, 1463.0], [28.8, 1463.0], [28.9, 1463.0], [29.0, 1469.0], [29.1, 1469.0], [29.2, 1469.0], [29.3, 1469.0], [29.4, 1469.0], [29.5, 1469.0], [29.6, 1469.0], [29.7, 1469.0], [29.8, 1469.0], [29.9, 1469.0], [30.0, 1471.0], [30.1, 1471.0], [30.2, 1471.0], [30.3, 1471.0], [30.4, 1471.0], [30.5, 1471.0], [30.6, 1471.0], [30.7, 1471.0], [30.8, 1471.0], [30.9, 1471.0], [31.0, 1471.0], [31.1, 1471.0], [31.2, 1471.0], [31.3, 1471.0], [31.4, 1471.0], [31.5, 1471.0], [31.6, 1471.0], [31.7, 1471.0], [31.8, 1471.0], [31.9, 1471.0], [32.0, 1473.0], [32.1, 1473.0], [32.2, 1473.0], [32.3, 1473.0], [32.4, 1473.0], [32.5, 1473.0], [32.6, 1473.0], [32.7, 1473.0], [32.8, 1473.0], [32.9, 1473.0], [33.0, 1474.0], [33.1, 1474.0], [33.2, 1474.0], [33.3, 1474.0], [33.4, 1474.0], [33.5, 1474.0], [33.6, 1474.0], [33.7, 1474.0], [33.8, 1474.0], [33.9, 1474.0], [34.0, 1474.0], [34.1, 1474.0], [34.2, 1474.0], [34.3, 1474.0], [34.4, 1474.0], [34.5, 1474.0], [34.6, 1474.0], [34.7, 1474.0], [34.8, 1474.0], [34.9, 1474.0], [35.0, 1476.0], [35.1, 1476.0], [35.2, 1476.0], [35.3, 1476.0], [35.4, 1476.0], [35.5, 1476.0], [35.6, 1476.0], [35.7, 1476.0], [35.8, 1476.0], [35.9, 1476.0], [36.0, 1478.0], [36.1, 1478.0], [36.2, 1478.0], [36.3, 1478.0], [36.4, 1478.0], [36.5, 1478.0], [36.6, 1478.0], [36.7, 1478.0], [36.8, 1478.0], [36.9, 1478.0], [37.0, 1479.0], [37.1, 1479.0], [37.2, 1479.0], [37.3, 1479.0], [37.4, 1479.0], [37.5, 1479.0], [37.6, 1479.0], [37.7, 1479.0], [37.8, 1479.0], [37.9, 1479.0], [38.0, 1485.0], [38.1, 1485.0], [38.2, 1485.0], [38.3, 1485.0], [38.4, 1485.0], [38.5, 1485.0], [38.6, 1485.0], [38.7, 1485.0], [38.8, 1485.0], [38.9, 1485.0], [39.0, 1486.0], [39.1, 1486.0], [39.2, 1486.0], [39.3, 1486.0], [39.4, 1486.0], [39.5, 1486.0], [39.6, 1486.0], [39.7, 1486.0], [39.8, 1486.0], [39.9, 1486.0], [40.0, 1486.0], [40.1, 1486.0], [40.2, 1486.0], [40.3, 1486.0], [40.4, 1486.0], [40.5, 1486.0], [40.6, 1486.0], [40.7, 1486.0], [40.8, 1486.0], [40.9, 1486.0], [41.0, 1487.0], [41.1, 1487.0], [41.2, 1487.0], [41.3, 1487.0], [41.4, 1487.0], [41.5, 1487.0], [41.6, 1487.0], [41.7, 1487.0], [41.8, 1487.0], [41.9, 1487.0], [42.0, 1488.0], [42.1, 1488.0], [42.2, 1488.0], [42.3, 1488.0], [42.4, 1488.0], [42.5, 1488.0], [42.6, 1488.0], [42.7, 1488.0], [42.8, 1488.0], [42.9, 1488.0], [43.0, 1490.0], [43.1, 1490.0], [43.2, 1490.0], [43.3, 1490.0], [43.4, 1490.0], [43.5, 1490.0], [43.6, 1490.0], [43.7, 1490.0], [43.8, 1490.0], [43.9, 1490.0], [44.0, 1490.0], [44.1, 1490.0], [44.2, 1490.0], [44.3, 1490.0], [44.4, 1490.0], [44.5, 1490.0], [44.6, 1490.0], [44.7, 1490.0], [44.8, 1490.0], [44.9, 1490.0], [45.0, 1493.0], [45.1, 1493.0], [45.2, 1493.0], [45.3, 1493.0], [45.4, 1493.0], [45.5, 1493.0], [45.6, 1493.0], [45.7, 1493.0], [45.8, 1493.0], [45.9, 1493.0], [46.0, 1495.0], [46.1, 1495.0], [46.2, 1495.0], [46.3, 1495.0], [46.4, 1495.0], [46.5, 1495.0], [46.6, 1495.0], [46.7, 1495.0], [46.8, 1495.0], [46.9, 1495.0], [47.0, 1495.0], [47.1, 1495.0], [47.2, 1495.0], [47.3, 1495.0], [47.4, 1495.0], [47.5, 1495.0], [47.6, 1495.0], [47.7, 1495.0], [47.8, 1495.0], [47.9, 1495.0], [48.0, 1495.0], [48.1, 1495.0], [48.2, 1495.0], [48.3, 1495.0], [48.4, 1495.0], [48.5, 1495.0], [48.6, 1495.0], [48.7, 1495.0], [48.8, 1495.0], [48.9, 1495.0], [49.0, 1498.0], [49.1, 1498.0], [49.2, 1498.0], [49.3, 1498.0], [49.4, 1498.0], [49.5, 1498.0], [49.6, 1498.0], [49.7, 1498.0], [49.8, 1498.0], [49.9, 1498.0], [50.0, 1498.0], [50.1, 1498.0], [50.2, 1498.0], [50.3, 1498.0], [50.4, 1498.0], [50.5, 1498.0], [50.6, 1498.0], [50.7, 1498.0], [50.8, 1498.0], [50.9, 1498.0], [51.0, 1498.0], [51.1, 1498.0], [51.2, 1498.0], [51.3, 1498.0], [51.4, 1498.0], [51.5, 1498.0], [51.6, 1498.0], [51.7, 1498.0], [51.8, 1498.0], [51.9, 1498.0], [52.0, 1501.0], [52.1, 1501.0], [52.2, 1501.0], [52.3, 1501.0], [52.4, 1501.0], [52.5, 1501.0], [52.6, 1501.0], [52.7, 1501.0], [52.8, 1501.0], [52.9, 1501.0], [53.0, 1502.0], [53.1, 1502.0], [53.2, 1502.0], [53.3, 1502.0], [53.4, 1502.0], [53.5, 1502.0], [53.6, 1502.0], [53.7, 1502.0], [53.8, 1502.0], [53.9, 1502.0], [54.0, 1508.0], [54.1, 1508.0], [54.2, 1508.0], [54.3, 1508.0], [54.4, 1508.0], [54.5, 1508.0], [54.6, 1508.0], [54.7, 1508.0], [54.8, 1508.0], [54.9, 1508.0], [55.0, 1513.0], [55.1, 1513.0], [55.2, 1513.0], [55.3, 1513.0], [55.4, 1513.0], [55.5, 1513.0], [55.6, 1513.0], [55.7, 1513.0], [55.8, 1513.0], [55.9, 1513.0], [56.0, 1515.0], [56.1, 1515.0], [56.2, 1515.0], [56.3, 1515.0], [56.4, 1515.0], [56.5, 1515.0], [56.6, 1515.0], [56.7, 1515.0], [56.8, 1515.0], [56.9, 1515.0], [57.0, 1519.0], [57.1, 1519.0], [57.2, 1519.0], [57.3, 1519.0], [57.4, 1519.0], [57.5, 1519.0], [57.6, 1519.0], [57.7, 1519.0], [57.8, 1519.0], [57.9, 1519.0], [58.0, 1529.0], [58.1, 1529.0], [58.2, 1529.0], [58.3, 1529.0], [58.4, 1529.0], [58.5, 1529.0], [58.6, 1529.0], [58.7, 1529.0], [58.8, 1529.0], [58.9, 1529.0], [59.0, 1530.0], [59.1, 1530.0], [59.2, 1530.0], [59.3, 1530.0], [59.4, 1530.0], [59.5, 1530.0], [59.6, 1530.0], [59.7, 1530.0], [59.8, 1530.0], [59.9, 1530.0], [60.0, 1534.0], [60.1, 1534.0], [60.2, 1534.0], [60.3, 1534.0], [60.4, 1534.0], [60.5, 1534.0], [60.6, 1534.0], [60.7, 1534.0], [60.8, 1534.0], [60.9, 1534.0], [61.0, 1537.0], [61.1, 1537.0], [61.2, 1537.0], [61.3, 1537.0], [61.4, 1537.0], [61.5, 1537.0], [61.6, 1537.0], [61.7, 1537.0], [61.8, 1537.0], [61.9, 1537.0], [62.0, 1542.0], [62.1, 1542.0], [62.2, 1542.0], [62.3, 1542.0], [62.4, 1542.0], [62.5, 1542.0], [62.6, 1542.0], [62.7, 1542.0], [62.8, 1542.0], [62.9, 1542.0], [63.0, 1542.0], [63.1, 1542.0], [63.2, 1542.0], [63.3, 1542.0], [63.4, 1542.0], [63.5, 1542.0], [63.6, 1542.0], [63.7, 1542.0], [63.8, 1542.0], [63.9, 1542.0], [64.0, 1544.0], [64.1, 1544.0], [64.2, 1544.0], [64.3, 1544.0], [64.4, 1544.0], [64.5, 1544.0], [64.6, 1544.0], [64.7, 1544.0], [64.8, 1544.0], [64.9, 1544.0], [65.0, 1547.0], [65.1, 1547.0], [65.2, 1547.0], [65.3, 1547.0], [65.4, 1547.0], [65.5, 1547.0], [65.6, 1547.0], [65.7, 1547.0], [65.8, 1547.0], [65.9, 1547.0], [66.0, 1549.0], [66.1, 1549.0], [66.2, 1549.0], [66.3, 1549.0], [66.4, 1549.0], [66.5, 1549.0], [66.6, 1549.0], [66.7, 1549.0], [66.8, 1549.0], [66.9, 1549.0], [67.0, 1550.0], [67.1, 1550.0], [67.2, 1550.0], [67.3, 1550.0], [67.4, 1550.0], [67.5, 1550.0], [67.6, 1550.0], [67.7, 1550.0], [67.8, 1550.0], [67.9, 1550.0], [68.0, 1574.0], [68.1, 1574.0], [68.2, 1574.0], [68.3, 1574.0], [68.4, 1574.0], [68.5, 1574.0], [68.6, 1574.0], [68.7, 1574.0], [68.8, 1574.0], [68.9, 1574.0], [69.0, 1575.0], [69.1, 1575.0], [69.2, 1575.0], [69.3, 1575.0], [69.4, 1575.0], [69.5, 1575.0], [69.6, 1575.0], [69.7, 1575.0], [69.8, 1575.0], [69.9, 1575.0], [70.0, 1577.0], [70.1, 1577.0], [70.2, 1577.0], [70.3, 1577.0], [70.4, 1577.0], [70.5, 1577.0], [70.6, 1577.0], [70.7, 1577.0], [70.8, 1577.0], [70.9, 1577.0], [71.0, 1578.0], [71.1, 1578.0], [71.2, 1578.0], [71.3, 1578.0], [71.4, 1578.0], [71.5, 1578.0], [71.6, 1578.0], [71.7, 1578.0], [71.8, 1578.0], [71.9, 1578.0], [72.0, 1599.0], [72.1, 1599.0], [72.2, 1599.0], [72.3, 1599.0], [72.4, 1599.0], [72.5, 1599.0], [72.6, 1599.0], [72.7, 1599.0], [72.8, 1599.0], [72.9, 1599.0], [73.0, 1600.0], [73.1, 1600.0], [73.2, 1600.0], [73.3, 1600.0], [73.4, 1600.0], [73.5, 1600.0], [73.6, 1600.0], [73.7, 1600.0], [73.8, 1600.0], [73.9, 1600.0], [74.0, 1621.0], [74.1, 1621.0], [74.2, 1621.0], [74.3, 1621.0], [74.4, 1621.0], [74.5, 1621.0], [74.6, 1621.0], [74.7, 1621.0], [74.8, 1621.0], [74.9, 1621.0], [75.0, 1622.0], [75.1, 1622.0], [75.2, 1622.0], [75.3, 1622.0], [75.4, 1622.0], [75.5, 1622.0], [75.6, 1622.0], [75.7, 1622.0], [75.8, 1622.0], [75.9, 1622.0], [76.0, 1631.0], [76.1, 1631.0], [76.2, 1631.0], [76.3, 1631.0], [76.4, 1631.0], [76.5, 1631.0], [76.6, 1631.0], [76.7, 1631.0], [76.8, 1631.0], [76.9, 1631.0], [77.0, 1646.0], [77.1, 1646.0], [77.2, 1646.0], [77.3, 1646.0], [77.4, 1646.0], [77.5, 1646.0], [77.6, 1646.0], [77.7, 1646.0], [77.8, 1646.0], [77.9, 1646.0], [78.0, 1649.0], [78.1, 1649.0], [78.2, 1649.0], [78.3, 1649.0], [78.4, 1649.0], [78.5, 1649.0], [78.6, 1649.0], [78.7, 1649.0], [78.8, 1649.0], [78.9, 1649.0], [79.0, 1651.0], [79.1, 1651.0], [79.2, 1651.0], [79.3, 1651.0], [79.4, 1651.0], [79.5, 1651.0], [79.6, 1651.0], [79.7, 1651.0], [79.8, 1651.0], [79.9, 1651.0], [80.0, 1666.0], [80.1, 1666.0], [80.2, 1666.0], [80.3, 1666.0], [80.4, 1666.0], [80.5, 1666.0], [80.6, 1666.0], [80.7, 1666.0], [80.8, 1666.0], [80.9, 1666.0], [81.0, 1677.0], [81.1, 1677.0], [81.2, 1677.0], [81.3, 1677.0], [81.4, 1677.0], [81.5, 1677.0], [81.6, 1677.0], [81.7, 1677.0], [81.8, 1677.0], [81.9, 1677.0], [82.0, 1692.0], [82.1, 1692.0], [82.2, 1692.0], [82.3, 1692.0], [82.4, 1692.0], [82.5, 1692.0], [82.6, 1692.0], [82.7, 1692.0], [82.8, 1692.0], [82.9, 1692.0], [83.0, 1704.0], [83.1, 1704.0], [83.2, 1704.0], [83.3, 1704.0], [83.4, 1704.0], [83.5, 1704.0], [83.6, 1704.0], [83.7, 1704.0], [83.8, 1704.0], [83.9, 1704.0], [84.0, 1708.0], [84.1, 1708.0], [84.2, 1708.0], [84.3, 1708.0], [84.4, 1708.0], [84.5, 1708.0], [84.6, 1708.0], [84.7, 1708.0], [84.8, 1708.0], [84.9, 1708.0], [85.0, 1717.0], [85.1, 1717.0], [85.2, 1717.0], [85.3, 1717.0], [85.4, 1717.0], [85.5, 1717.0], [85.6, 1717.0], [85.7, 1717.0], [85.8, 1717.0], [85.9, 1717.0], [86.0, 1728.0], [86.1, 1728.0], [86.2, 1728.0], [86.3, 1728.0], [86.4, 1728.0], [86.5, 1728.0], [86.6, 1728.0], [86.7, 1728.0], [86.8, 1728.0], [86.9, 1728.0], [87.0, 1731.0], [87.1, 1731.0], [87.2, 1731.0], [87.3, 1731.0], [87.4, 1731.0], [87.5, 1731.0], [87.6, 1731.0], [87.7, 1731.0], [87.8, 1731.0], [87.9, 1731.0], [88.0, 1741.0], [88.1, 1741.0], [88.2, 1741.0], [88.3, 1741.0], [88.4, 1741.0], [88.5, 1741.0], [88.6, 1741.0], [88.7, 1741.0], [88.8, 1741.0], [88.9, 1741.0], [89.0, 1791.0], [89.1, 1791.0], [89.2, 1791.0], [89.3, 1791.0], [89.4, 1791.0], [89.5, 1791.0], [89.6, 1791.0], [89.7, 1791.0], [89.8, 1791.0], [89.9, 1791.0], [90.0, 1886.0], [90.1, 1886.0], [90.2, 1886.0], [90.3, 1886.0], [90.4, 1886.0], [90.5, 1886.0], [90.6, 1886.0], [90.7, 1886.0], [90.8, 1886.0], [90.9, 1886.0], [91.0, 1922.0], [91.1, 1922.0], [91.2, 1922.0], [91.3, 1922.0], [91.4, 1922.0], [91.5, 1922.0], [91.6, 1922.0], [91.7, 1922.0], [91.8, 1922.0], [91.9, 1922.0], [92.0, 1951.0], [92.1, 1951.0], [92.2, 1951.0], [92.3, 1951.0], [92.4, 1951.0], [92.5, 1951.0], [92.6, 1951.0], [92.7, 1951.0], [92.8, 1951.0], [92.9, 1951.0], [93.0, 1979.0], [93.1, 1979.0], [93.2, 1979.0], [93.3, 1979.0], [93.4, 1979.0], [93.5, 1979.0], [93.6, 1979.0], [93.7, 1979.0], [93.8, 1979.0], [93.9, 1979.0], [94.0, 2016.0], [94.1, 2016.0], [94.2, 2016.0], [94.3, 2016.0], [94.4, 2016.0], [94.5, 2016.0], [94.6, 2016.0], [94.7, 2016.0], [94.8, 2016.0], [94.9, 2016.0], [95.0, 2167.0], [95.1, 2167.0], [95.2, 2167.0], [95.3, 2167.0], [95.4, 2167.0], [95.5, 2167.0], [95.6, 2167.0], [95.7, 2167.0], [95.8, 2167.0], [95.9, 2167.0], [96.0, 20030.0], [96.1, 20030.0], [96.2, 20030.0], [96.3, 20030.0], [96.4, 20030.0], [96.5, 20030.0], [96.6, 20030.0], [96.7, 20030.0], [96.8, 20030.0], [96.9, 20030.0], [97.0, 20034.0], [97.1, 20034.0], [97.2, 20034.0], [97.3, 20034.0], [97.4, 20034.0], [97.5, 20034.0], [97.6, 20034.0], [97.7, 20034.0], [97.8, 20034.0], [97.9, 20034.0], [98.0, 20045.0], [98.1, 20045.0], [98.2, 20045.0], [98.3, 20045.0], [98.4, 20045.0], [98.5, 20045.0], [98.6, 20045.0], [98.7, 20045.0], [98.8, 20045.0], [98.9, 20045.0], [99.0, 20066.0], [99.1, 20066.0], [99.2, 20066.0], [99.3, 20066.0], [99.4, 20066.0], [99.5, 20066.0], [99.6, 20066.0], [99.7, 20066.0], [99.8, 20066.0], [99.9, 20066.0]], "isOverall": false, "label": "Search Proposal", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 38.0, "series": [{"data": [[2100.0, 6.0], [2200.0, 3.0], [2300.0, 1.0], [2400.0, 2.0], [2500.0, 2.0], [2600.0, 1.0], [2800.0, 2.0], [2700.0, 1.0], [2900.0, 1.0], [200.0, 3.0], [3300.0, 1.0], [3200.0, 1.0], [300.0, 1.0], [20000.0, 4.0], [1400.0, 10.0], [1500.0, 16.0], [100.0, 1.0], [1600.0, 18.0], [400.0, 1.0], [1700.0, 12.0], [1800.0, 6.0], [1900.0, 5.0], [2000.0, 2.0]], "isOverall": false, "label": "Open Proposal", "isController": false}, {"data": [[8400.0, 1.0], [8500.0, 1.0], [9200.0, 1.0], [9000.0, 1.0], [9400.0, 1.0], [20200.0, 3.0], [6100.0, 4.0], [6000.0, 2.0], [5900.0, 1.0], [6300.0, 6.0], [6200.0, 1.0], [6600.0, 10.0], [6500.0, 6.0], [6400.0, 2.0], [6700.0, 6.0], [6900.0, 11.0], [6800.0, 8.0], [7100.0, 7.0], [7000.0, 9.0], [7200.0, 3.0], [7400.0, 3.0], [7300.0, 3.0], [7500.0, 2.0], [7600.0, 2.0], [7900.0, 1.0], [7800.0, 2.0], [7700.0, 1.0], [8000.0, 2.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[2100.0, 1.0], [1200.0, 2.0], [20000.0, 4.0], [1300.0, 12.0], [1400.0, 38.0], [1500.0, 21.0], [1600.0, 10.0], [1700.0, 7.0], [1800.0, 1.0], [1900.0, 3.0], [2000.0, 1.0]], "isOverall": false, "label": "Search Proposal", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 221.0, "series": [{"data": [[0.0, 6.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 62.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 221.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 11.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.71509748E12, "maxY": 5.874999999999999, "series": [{"data": [[1.71509748E12, 2.0], [1.71509796E12, 2.6000000000000005], [1.71509766E12, 2.3846153846153846], [1.7150976E12, 2.4666666666666663], [1.71509808E12, 2.3214285714285707], [1.71509778E12, 2.625000000000001], [1.71509772E12, 5.874999999999999], [1.7150979E12, 2.566666666666667], [1.71509784E12, 2.4999999999999996], [1.71509754E12, 2.5483870967741935], [1.71509802E12, 2.533333333333333]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71509808E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1276.0, "minX": 1.0, "maxY": 20218.0, "series": [{"data": [[2.0, 1559.5], [4.0, 2135.5], [1.0, 1422.0], [5.0, 11152.5], [3.0, 1926.2619047619053], [6.0, 8478.0], [7.0, 7028.75]], "isOverall": false, "label": "Open Proposal", "isController": false}, {"data": [[3.2499999999999987, 2495.91]], "isOverall": false, "label": "Open Proposal-Aggregated", "isController": false}, {"data": [[2.0, 7040.4418604651155], [4.0, 8010.0], [1.0, 5943.0], [5.0, 20218.0], [3.0, 6762.266666666668], [6.0, 10341.0], [7.0, 14844.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[2.8500000000000005, 7409.560000000001]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 1524.987654320988], [4.0, 1504.0], [1.0, 1276.0], [5.0, 10732.0], [3.0, 1662.8333333333333], [6.0, 9009.8], [7.0, 7655.333333333334]], "isOverall": false, "label": "Search Proposal", "isController": false}, {"data": [[2.500000000000001, 2272.6400000000003]], "isOverall": false, "label": "Search Proposal-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 7.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.71509748E12, "maxY": 93489.1, "series": [{"data": [[1.71509748E12, 2696.45], [1.71509796E12, 90832.85], [1.71509766E12, 77528.03333333334], [1.7150976E12, 91097.43333333333], [1.71509808E12, 85187.08333333333], [1.71509778E12, 93450.23333333334], [1.71509772E12, 66581.8], [1.7150979E12, 90811.2], [1.71509784E12, 90587.63333333333], [1.71509754E12, 93489.1], [1.71509802E12, 90708.68333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71509748E12, 0.0], [1.71509796E12, 0.0], [1.71509766E12, 0.0], [1.7150976E12, 0.0], [1.71509808E12, 0.0], [1.71509778E12, 0.0], [1.71509772E12, 0.0], [1.7150979E12, 0.0], [1.71509784E12, 0.0], [1.71509754E12, 0.0], [1.71509802E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71509808E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1303.0, "minX": 1.71509748E12, "maxY": 11633.818181818182, "series": [{"data": [[1.71509796E12, 1629.8], [1.71509766E12, 1713.6666666666667], [1.7150976E12, 1857.3], [1.71509808E12, 1790.8], [1.71509778E12, 3419.9090909090914], [1.71509772E12, 7843.8], [1.7150979E12, 1805.8000000000002], [1.71509784E12, 1730.4], [1.71509754E12, 1303.0], [1.71509802E12, 1694.0]], "isOverall": false, "label": "Open Proposal", "isController": false}, {"data": [[1.71509748E12, 7157.0], [1.71509796E12, 7049.7], [1.71509766E12, 6631.444444444444], [1.7150976E12, 6783.1], [1.71509808E12, 6663.222222222222], [1.71509778E12, 6991.599999999999], [1.71509772E12, 11633.818181818182], [1.7150979E12, 7074.000000000001], [1.71509784E12, 7073.3], [1.71509754E12, 6751.0], [1.71509802E12, 6894.799999999999]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.71509796E12, 1512.2], [1.71509766E12, 1504.375], [1.7150976E12, 1470.1000000000001], [1.71509808E12, 1492.7777777777778], [1.71509778E12, 1522.0000000000002], [1.71509772E12, 8270.363636363636], [1.7150979E12, 1585.8999999999999], [1.71509784E12, 1499.3], [1.71509754E12, 1636.909090909091], [1.71509802E12, 1539.7]], "isOverall": false, "label": "Search Proposal", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71509808E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71509748E12, "maxY": 4.9E-324, "series": [{"data": [[1.71509796E12, 0.0], [1.71509766E12, 0.0], [1.7150976E12, 0.0], [1.71509808E12, 0.0], [1.71509778E12, 0.0], [1.71509772E12, 0.0], [1.7150979E12, 0.0], [1.71509784E12, 0.0], [1.71509754E12, 0.0], [1.71509802E12, 0.0]], "isOverall": false, "label": "Open Proposal", "isController": false}, {"data": [[1.71509748E12, 0.0], [1.71509796E12, 0.0], [1.71509766E12, 0.0], [1.7150976E12, 0.0], [1.71509808E12, 0.0], [1.71509778E12, 0.0], [1.71509772E12, 0.0], [1.7150979E12, 0.0], [1.71509784E12, 0.0], [1.71509754E12, 0.0], [1.71509802E12, 0.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.71509796E12, 0.0], [1.71509766E12, 0.0], [1.7150976E12, 0.0], [1.71509808E12, 0.0], [1.71509778E12, 0.0], [1.71509772E12, 0.0], [1.7150979E12, 0.0], [1.71509784E12, 0.0], [1.71509754E12, 0.0], [1.71509802E12, 0.0]], "isOverall": false, "label": "Search Proposal", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71509808E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71509748E12, "maxY": 4.9E-324, "series": [{"data": [[1.71509796E12, 0.0], [1.71509766E12, 0.0], [1.7150976E12, 0.0], [1.71509808E12, 0.0], [1.71509778E12, 0.0], [1.71509772E12, 0.0], [1.7150979E12, 0.0], [1.71509784E12, 0.0], [1.71509754E12, 0.0], [1.71509802E12, 0.0]], "isOverall": false, "label": "Open Proposal", "isController": false}, {"data": [[1.71509748E12, 0.0], [1.71509796E12, 0.0], [1.71509766E12, 0.0], [1.7150976E12, 0.0], [1.71509808E12, 0.0], [1.71509778E12, 0.0], [1.71509772E12, 0.0], [1.7150979E12, 0.0], [1.71509784E12, 0.0], [1.71509754E12, 0.0], [1.71509802E12, 0.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.71509796E12, 0.0], [1.71509766E12, 0.0], [1.7150976E12, 0.0], [1.71509808E12, 0.0], [1.71509778E12, 0.0], [1.71509772E12, 0.0], [1.7150979E12, 0.0], [1.71509784E12, 0.0], [1.71509754E12, 0.0], [1.71509802E12, 0.0]], "isOverall": false, "label": "Search Proposal", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71509808E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 180.0, "minX": 1.71509748E12, "maxY": 9474.0, "series": [{"data": [[1.71509748E12, 7157.0], [1.71509796E12, 8028.0], [1.71509766E12, 7687.0], [1.7150976E12, 7207.0], [1.71509808E12, 7469.0], [1.71509778E12, 7807.0], [1.71509772E12, 9474.0], [1.7150979E12, 7860.0], [1.71509784E12, 8040.0], [1.71509754E12, 7541.0], [1.71509802E12, 7631.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71509748E12, 7157.0], [1.71509796E12, 7199.9], [1.71509766E12, 7224.7], [1.7150976E12, 6995.8], [1.71509808E12, 6934.2], [1.71509778E12, 7232.8], [1.71509772E12, 9177.8], [1.7150979E12, 7351.200000000001], [1.71509784E12, 7114.7], [1.71509754E12, 6902.8], [1.71509802E12, 7051.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71509748E12, 7157.0], [1.71509796E12, 8028.0], [1.71509766E12, 7687.0], [1.7150976E12, 7207.0], [1.71509808E12, 7469.0], [1.71509778E12, 7807.0], [1.71509772E12, 9474.0], [1.7150979E12, 7860.0], [1.71509784E12, 8040.0], [1.71509754E12, 7541.0], [1.71509802E12, 7631.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71509748E12, 7157.0], [1.71509796E12, 7660.599999999999], [1.71509766E12, 7613.15], [1.7150976E12, 7128.349999999999], [1.71509808E12, 7281.799999999999], [1.71509778E12, 7637.799999999999], [1.71509772E12, 9436.05], [1.7150979E12, 7822.05], [1.71509784E12, 7683.599999999999], [1.71509754E12, 7269.199999999999], [1.71509802E12, 7362.599999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71509748E12, 7157.0], [1.71509796E12, 217.0], [1.71509766E12, 1426.0], [1.7150976E12, 1348.0], [1.71509808E12, 1273.0], [1.71509778E12, 384.0], [1.71509772E12, 1419.0], [1.7150979E12, 1338.0], [1.71509784E12, 481.0], [1.71509754E12, 180.0], [1.71509802E12, 1375.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71509748E12, 7157.0], [1.71509796E12, 1686.5], [1.71509766E12, 1703.5], [1.7150976E12, 1732.5], [1.71509808E12, 1663.5], [1.71509778E12, 1740.0], [1.71509772E12, 2708.0], [1.7150979E12, 1756.0], [1.71509784E12, 1744.5], [1.71509754E12, 1935.0], [1.71509802E12, 1725.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71509808E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1486.0, "minX": 1.0, "maxY": 20057.0, "series": [{"data": [[1.0, 1761.0], [2.0, 1710.0], [3.0, 1486.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 20055.0], [2.0, 20057.0], [3.0, 20039.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[1.0, 0.0], [2.0, 0.0], [3.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [2.0, 0.0], [3.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.71509748E12, "maxY": 0.5333333333333333, "series": [{"data": [[1.71509748E12, 0.03333333333333333], [1.71509796E12, 0.5], [1.71509766E12, 0.45], [1.7150976E12, 0.5], [1.71509808E12, 0.43333333333333335], [1.71509778E12, 0.5166666666666667], [1.71509772E12, 0.5333333333333333], [1.7150979E12, 0.5], [1.71509784E12, 0.5], [1.71509754E12, 0.5333333333333333], [1.71509802E12, 0.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71509808E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71509748E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.71509748E12, 0.016666666666666666], [1.71509796E12, 0.5], [1.71509766E12, 0.43333333333333335], [1.7150976E12, 0.5], [1.71509808E12, 0.4666666666666667], [1.71509778E12, 0.5166666666666667], [1.71509772E12, 0.36666666666666664], [1.7150979E12, 0.5], [1.71509784E12, 0.5], [1.71509754E12, 0.5166666666666667], [1.71509802E12, 0.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71509778E12, 0.016666666666666666], [1.71509772E12, 0.16666666666666666]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71509808E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71509748E12, "maxY": 0.18333333333333332, "series": [{"data": [[1.71509796E12, 0.16666666666666666], [1.71509766E12, 0.15], [1.7150976E12, 0.16666666666666666], [1.71509808E12, 0.16666666666666666], [1.71509778E12, 0.16666666666666666], [1.71509772E12, 0.11666666666666667], [1.7150979E12, 0.16666666666666666], [1.71509784E12, 0.16666666666666666], [1.71509754E12, 0.16666666666666666], [1.71509802E12, 0.16666666666666666]], "isOverall": false, "label": "Open Proposal-success", "isController": false}, {"data": [[1.71509778E12, 0.016666666666666666], [1.71509772E12, 0.05]], "isOverall": false, "label": "Open Proposal-failure", "isController": false}, {"data": [[1.71509796E12, 0.16666666666666666], [1.71509766E12, 0.13333333333333333], [1.7150976E12, 0.16666666666666666], [1.71509808E12, 0.15], [1.71509778E12, 0.18333333333333332], [1.71509772E12, 0.11666666666666667], [1.7150979E12, 0.16666666666666666], [1.71509784E12, 0.16666666666666666], [1.71509754E12, 0.18333333333333332], [1.71509802E12, 0.16666666666666666]], "isOverall": false, "label": "Search Proposal-success", "isController": false}, {"data": [[1.71509772E12, 0.06666666666666667]], "isOverall": false, "label": "Search Proposal-failure", "isController": false}, {"data": [[1.71509748E12, 0.016666666666666666], [1.71509796E12, 0.16666666666666666], [1.71509766E12, 0.15], [1.7150976E12, 0.16666666666666666], [1.71509808E12, 0.15], [1.71509778E12, 0.16666666666666666], [1.71509772E12, 0.13333333333333333], [1.7150979E12, 0.16666666666666666], [1.71509784E12, 0.16666666666666666], [1.71509754E12, 0.16666666666666666], [1.71509802E12, 0.16666666666666666]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.71509772E12, 0.05]], "isOverall": false, "label": "Login-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71509808E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71509748E12, "maxY": 0.5166666666666667, "series": [{"data": [[1.71509748E12, 0.016666666666666666], [1.71509796E12, 0.5], [1.71509766E12, 0.43333333333333335], [1.7150976E12, 0.5], [1.71509808E12, 0.4666666666666667], [1.71509778E12, 0.5166666666666667], [1.71509772E12, 0.36666666666666664], [1.7150979E12, 0.5], [1.71509784E12, 0.5], [1.71509754E12, 0.5166666666666667], [1.71509802E12, 0.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71509778E12, 0.016666666666666666], [1.71509772E12, 0.16666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71509808E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

